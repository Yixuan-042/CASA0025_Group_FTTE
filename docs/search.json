[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CO₂ Emission Analysis and Projections in Guangzhou, China",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nAs the world’s largest emitter of carbon dioxide (CO2), China faces significant challenges in addressing climate change. With cities contributing over 70% of global energy-related CO2 emissions, understanding urban emission patterns is crucial. We selected Guangzhou as our study area due to its economic significance in the Greater Bay Area, rapid urbanization, and diverse land use patterns. This application explores relationships between nighttime lights, population, land cover, and building characteristics with CO2 emissions to identify key emission drivers and support evidence-based carbon reduction policies in rapidly developing Chinese cities.\n\n\n\nThis application is designed for urban planners, policymakers, and environmental researchers focused on Guangzhou’s central districts. These stakeholders need evidence-based tools to understand CO2 emission patterns and their driving factors within the urban core. By providing spatial visualization of emission and identifying relationships between urban characteristics and carbon emissions in central Guangzhou, our tool helps users develop targeted mitigation strategies for high-density areas, evaluate potential impacts of urban redevelopment projects, and monitor progress toward local carbon reduction goals. The interactive interface allows decision-makers to explore complex environmental data specifically for Guangzhou’s urban center.\n\n\n\nCO₂ Emissions Data: Annual CO₂ emissions data is sourced from the ODIAC 2023 dataset (ODIAC 2023). Historical emissions from 2018 to 2022 are also included to support temporal trend analysis.\nLand Cover Data: Land cover classification is generated using Landsat 9 Surface Reflectance imagery and ESA WorldCover 2021 as training labels. A Random Forest model is trained and applied in Google Earth Engine to produce a 30-meter resolution land cover map.\nPopulation Data: Population data is provided by the Chinese Academy of Sciences, offering 1 km × 1 km gridded raster data for China, supporting demographic and spatial distribution analysis.\nNighttime Light Data: Nighttime light intensity for 2023 is processed using monthly VIIRS DNB composites in Google Earth Engine. The data is aggregated to produce a 100-meter resolution raster clipped to the Guangzhou boundary.\nBuilding Characteristics Data: Building data is sourced from Gaode Map’s 3D Map API (Gaode Map 3D), including building height, footprint area, and gross internal area (GIA) for urban morphology analysis.\n\n\n\nData Preprocessing: Clip and project CO2 emissions, landcover types, urban building coverage, population, and nighttime light data in Guangzhou to create uniform raster files. Model Construction: Use Random Forest machine learning with land cover types, urban building coverage, population, and nighttime light data as independent variables, and CO2 emissions as the dependent variable. Address multicollinearity by processing six landcover types, forming regression models for Guangzhou’s administrative and built-up areas. Visualization and Prediction: Design layers to display CO2 emissions distribution. Utilize the fourth regression model to simulate urban densification impacts on emissions, adjusting landcover proportions to predict future CO2 levels.\n\n\n\nThis application provides urban planners and researchers with an intuitive interactive dashboard. Users can switch between thematic layers (population density, night lighting, architectural features, land cover, carbon dioxide emissions) through the drop-down menu and view detailed pixel-level information by clicking on the map. Dynamic charts can visually display the emission trends and spatial distribution of various regions. The prediction module enables users to simulate land cover changes and assess potential CO₂ impacts. The clarity and real-time interactivity of the interface enable decision-makers to explore the complex urban environmental relationships in Guangzhou and support targeted carbon reduction strategies.\n\n\n\n\nReplace the link below with the link to your application.\n\n\n\n\n\n\n\nUse this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\nThis application is designed for interactive environmental analysis using Google Earth Engine (GEE). It integrates multiple geospatial datasets, builds thematic visualizations, and applies machine learning models to predict CO₂ emissions under various landcover scenarios.\n\n\n\n\n\nThe first step imports core datasets including district boundaries, population density, nighttime light intensity, building statistics, and CO₂ emission rasters for the years 2017–2023.\nvar districts = ee.FeatureCollection('users/.../GZ_boundaries');\nvar populationFC = ee.FeatureCollection('projects/.../population0422');\nvar ntlFC = ee.FeatureCollection('projects/.../NTL0422');\nvar buildingStats = ee.FeatureCollection('projects/.../BuildingGrid0424');\nvar co2Paths = { 2017: 'users/.../2017co2', ..., 2023: 'users/.../2023co2' };\nMap.centerObject(districts, 9);\nA boundary layer is added to the map, ensuring district outlines remain on top of all visualizations.\n\n\n\nLandsat 9 imagery and ESA WorldCover data are used to train a Random Forest classifier. The resulting landcover classification is simplified into 7 categories for clearer visualization.\nvar composite = landsat9.median().clip(districts);\nvar samples = composite.addBands(esa).sample({ ... });\nvar classifier = ee.Classifier.smileRandomForest(50).train({ ... });\nvar classified = composite.classify(classifier).remap([10,20,...],[0,1,...]);\n\n\n\nThe application visualizes CO₂ emissions dynamically across different years. A dropdown menu allows users to switch between annual layers, and charts provide both citywide trends and district-level distributions.\nvar co2Images = years.reduce(function(obj, y) {\n  obj[y] = ee.Image(co2Paths[y]);\n  return obj;\n}, {});\nMap.layers().set(2, ui.Map.Layer(co2Images[2023], visParamsCO2, 'CO₂ Emission'));\n\n\n\n\n\n\nA thematic selector enables users to switch between layers such as population density, nighttime lights, and building characteristics. Clicking on the map displays real-time attribute values for the selected theme.\nvar visParamsDict = {\n  'Population Density': { image: popMasked, vis: {min: 0, max: 5000, palette: [...]}, units: 'people/km²' },\n  'Nighttime Lights': { ... },\n  ...\n};\nselector.onChange(function(key) { ... });\nMap.onClick(function(coords) { ... });\n\n\n\nAdministrative boundary layer always on top. - Land cover map: 7 categories of land based on training outputs - CO₂ emission layer: default 2023, supports year switching - Other thematic layers: selector switching, automatic legend refreshing createLegend function generates a unified style legend (supports custom units/colors)\n\n\n\n\nThe CO₂ panel in the upper right corner contains:\n\nYear selector\nLine chart of city average trends\nBar chart by district (automatically updated by year)\n\nThe left synthesized panel contains:\n\nTheme layer selector\nDynamically updated legend\nPie chart of land cover proportions in 2023\n\nReal-time sampling and display of pixel values and units when clicking on the map.\n\n\n\n\n\nThis project uses a Random Forest model to predict CO₂ emissions from urban features. Users select landcover change scenarios (e.g., Built-up to Forest), apply changes, and the model automatically re-predicts CO₂ emissions based on the updated features, showing spatial impacts and emission percentage changes. The model focuses on the city’s core districts to ensure higher prediction accuracy and computational efficiency.\n// Feature engineering\nvar combo4Features = [\n  'MeanHeight', 'population', 'density', 'BuiCover',\n  'lc_10', 'lc_20', 'lc_30', 'lc_40', 'lc_50', 'lc_60', 'lc_80'\n];\n\n// Restricting the scope of reasoning to the central city\nvar coreDistricts = districts.filter(ee.Filter.inList('ENG_NAME',[\n  'Tianhe', 'Yuexiu', 'Haizhu', 'Liwan', 'Baiyun', 'Huangpu'\n]));\n\n// Training Random Forests\nvar samples = featureImg.sample({\n  region: coreDistricts.geometry(),\n  scale: 1000,\n  numPixels: 2000,\n  seed: 42,\n  geometries: true\n}).filter(ee.Filter.notNull(combo4Features));\n\nvar rf = ee.Classifier.smileRandomForest(100)\n  .setOutputMode('REGRESSION')\n  .train({\n    features: samples,\n    classProperty: 'RASTERVALU',\n    inputProperties: combo4Features\n  });\n\n// Predict raw baseline\nvar baselinePred = featureImg.select(combo4Features).classify(rf);\n\n// Drop-down box for selecting scenarios\nvar scenarioSelect = ui.Select({\n  items: [\n    'Built-up ➔ Greenplace (20%)',\n    'Bare ➔ Built-up (20%)',\n    'Cropland ➔ Forest (50%)',\n  ],\n  style: {\n    stretch: 'horizontal',\n    fontWeight: 'bold',\n    fontSize: '14px'\n  }\n});\n\nvar applyButton = ui.Button({\n  label: 'Apply Change & Predict',\n  style: {stretch: 'horizontal', fontWeight: 'bold'},\n  onClick: function() {\n    var selected = scenarioSelect.getValue();\n    var percentage;\n    var modifiedLandcover = landcoverImg;\n    \n    if (selected === 'Built-up ➔ Greenplace (20%)') {\n      percentage = 0.2;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(50).and(ee.Image.random().lt(percentage)),\n        10\n      );\n    }\n    if (selected === 'Bare ➔ Built-up (20%)') {\n      percentage = 0.2;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(40).and(ee.Image.random().lt(percentage)),\n        50\n      );\n    }\n    if (selected === 'Cropland ➔ Forest (50%)') {\n      percentage = 0.5;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(60).and(ee.Image.random().lt(percentage)),\n        20\n      );\n    }"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CO₂ Emission Analysis and Projections in Guangzhou, China",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nAs the world’s largest emitter of carbon dioxide (CO2), China faces significant challenges in addressing climate change. With cities contributing over 70% of global energy-related CO2 emissions, understanding urban emission patterns is crucial. We selected Guangzhou as our study area due to its economic significance in the Greater Bay Area, rapid urbanization, and diverse land use patterns. This application explores relationships between nighttime lights, population, land cover, and building characteristics with CO2 emissions to identify key emission drivers and support evidence-based carbon reduction policies in rapidly developing Chinese cities.\n\n\n\nThis application is designed for urban planners, policymakers, and environmental researchers focused on Guangzhou’s central districts. These stakeholders need evidence-based tools to understand CO2 emission patterns and their driving factors within the urban core. By providing spatial visualization of emission and identifying relationships between urban characteristics and carbon emissions in central Guangzhou, our tool helps users develop targeted mitigation strategies for high-density areas, evaluate potential impacts of urban redevelopment projects, and monitor progress toward local carbon reduction goals. The interactive interface allows decision-makers to explore complex environmental data specifically for Guangzhou’s urban center.\n\n\n\nCO₂ Emissions Data: Annual CO₂ emissions data is sourced from the ODIAC 2023 dataset (ODIAC 2023). Historical emissions from 2018 to 2022 are also included to support temporal trend analysis.\nLand Cover Data: Land cover classification is generated using Landsat 9 Surface Reflectance imagery and ESA WorldCover 2021 as training labels. A Random Forest model is trained and applied in Google Earth Engine to produce a 30-meter resolution land cover map.\nPopulation Data: Population data is provided by the Chinese Academy of Sciences, offering 1 km × 1 km gridded raster data for China, supporting demographic and spatial distribution analysis.\nNighttime Light Data: Nighttime light intensity for 2023 is processed using monthly VIIRS DNB composites in Google Earth Engine. The data is aggregated to produce a 100-meter resolution raster clipped to the Guangzhou boundary.\nBuilding Characteristics Data: Building data is sourced from Gaode Map’s 3D Map API (Gaode Map 3D), including building height, footprint area, and gross internal area (GIA) for urban morphology analysis.\n\n\n\nData Preprocessing: Clip and project CO2 emissions, landcover types, urban building coverage, population, and nighttime light data in Guangzhou to create uniform raster files. Model Construction: Use Random Forest machine learning with land cover types, urban building coverage, population, and nighttime light data as independent variables, and CO2 emissions as the dependent variable. Address multicollinearity by processing six landcover types, forming regression models for Guangzhou’s administrative and built-up areas. Visualization and Prediction: Design layers to display CO2 emissions distribution. Utilize the fourth regression model to simulate urban densification impacts on emissions, adjusting landcover proportions to predict future CO2 levels.\n\n\n\nThis application provides urban planners and researchers with an intuitive interactive dashboard. Users can switch between thematic layers (population density, night lighting, architectural features, land cover, carbon dioxide emissions) through the drop-down menu and view detailed pixel-level information by clicking on the map. Dynamic charts can visually display the emission trends and spatial distribution of various regions. The prediction module enables users to simulate land cover changes and assess potential CO₂ impacts. The clarity and real-time interactivity of the interface enable decision-makers to explore the complex urban environmental relationships in Guangzhou and support targeted carbon reduction strategies."
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CO₂ Emission Analysis and Projections in Guangzhou, China",
    "section": "",
    "text": "Replace the link below with the link to your application."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CO₂ Emission Analysis and Projections in Guangzhou, China",
    "section": "",
    "text": "Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\nThis application is designed for interactive environmental analysis using Google Earth Engine (GEE). It integrates multiple geospatial datasets, builds thematic visualizations, and applies machine learning models to predict CO₂ emissions under various landcover scenarios.\n\n\n\n\n\nThe first step imports core datasets including district boundaries, population density, nighttime light intensity, building statistics, and CO₂ emission rasters for the years 2017–2023.\nvar districts = ee.FeatureCollection('users/.../GZ_boundaries');\nvar populationFC = ee.FeatureCollection('projects/.../population0422');\nvar ntlFC = ee.FeatureCollection('projects/.../NTL0422');\nvar buildingStats = ee.FeatureCollection('projects/.../BuildingGrid0424');\nvar co2Paths = { 2017: 'users/.../2017co2', ..., 2023: 'users/.../2023co2' };\nMap.centerObject(districts, 9);\nA boundary layer is added to the map, ensuring district outlines remain on top of all visualizations.\n\n\n\nLandsat 9 imagery and ESA WorldCover data are used to train a Random Forest classifier. The resulting landcover classification is simplified into 7 categories for clearer visualization.\nvar composite = landsat9.median().clip(districts);\nvar samples = composite.addBands(esa).sample({ ... });\nvar classifier = ee.Classifier.smileRandomForest(50).train({ ... });\nvar classified = composite.classify(classifier).remap([10,20,...],[0,1,...]);\n\n\n\nThe application visualizes CO₂ emissions dynamically across different years. A dropdown menu allows users to switch between annual layers, and charts provide both citywide trends and district-level distributions.\nvar co2Images = years.reduce(function(obj, y) {\n  obj[y] = ee.Image(co2Paths[y]);\n  return obj;\n}, {});\nMap.layers().set(2, ui.Map.Layer(co2Images[2023], visParamsCO2, 'CO₂ Emission'));\n\n\n\n\n\n\nA thematic selector enables users to switch between layers such as population density, nighttime lights, and building characteristics. Clicking on the map displays real-time attribute values for the selected theme.\nvar visParamsDict = {\n  'Population Density': { image: popMasked, vis: {min: 0, max: 5000, palette: [...]}, units: 'people/km²' },\n  'Nighttime Lights': { ... },\n  ...\n};\nselector.onChange(function(key) { ... });\nMap.onClick(function(coords) { ... });\n\n\n\nAdministrative boundary layer always on top. - Land cover map: 7 categories of land based on training outputs - CO₂ emission layer: default 2023, supports year switching - Other thematic layers: selector switching, automatic legend refreshing createLegend function generates a unified style legend (supports custom units/colors)\n\n\n\n\nThe CO₂ panel in the upper right corner contains:\n\nYear selector\nLine chart of city average trends\nBar chart by district (automatically updated by year)\n\nThe left synthesized panel contains:\n\nTheme layer selector\nDynamically updated legend\nPie chart of land cover proportions in 2023\n\nReal-time sampling and display of pixel values and units when clicking on the map.\n\n\n\n\n\nThis project uses a Random Forest model to predict CO₂ emissions from urban features. Users select landcover change scenarios (e.g., Built-up to Forest), apply changes, and the model automatically re-predicts CO₂ emissions based on the updated features, showing spatial impacts and emission percentage changes. The model focuses on the city’s core districts to ensure higher prediction accuracy and computational efficiency.\n// Feature engineering\nvar combo4Features = [\n  'MeanHeight', 'population', 'density', 'BuiCover',\n  'lc_10', 'lc_20', 'lc_30', 'lc_40', 'lc_50', 'lc_60', 'lc_80'\n];\n\n// Restricting the scope of reasoning to the central city\nvar coreDistricts = districts.filter(ee.Filter.inList('ENG_NAME',[\n  'Tianhe', 'Yuexiu', 'Haizhu', 'Liwan', 'Baiyun', 'Huangpu'\n]));\n\n// Training Random Forests\nvar samples = featureImg.sample({\n  region: coreDistricts.geometry(),\n  scale: 1000,\n  numPixels: 2000,\n  seed: 42,\n  geometries: true\n}).filter(ee.Filter.notNull(combo4Features));\n\nvar rf = ee.Classifier.smileRandomForest(100)\n  .setOutputMode('REGRESSION')\n  .train({\n    features: samples,\n    classProperty: 'RASTERVALU',\n    inputProperties: combo4Features\n  });\n\n// Predict raw baseline\nvar baselinePred = featureImg.select(combo4Features).classify(rf);\n\n// Drop-down box for selecting scenarios\nvar scenarioSelect = ui.Select({\n  items: [\n    'Built-up ➔ Greenplace (20%)',\n    'Bare ➔ Built-up (20%)',\n    'Cropland ➔ Forest (50%)',\n  ],\n  style: {\n    stretch: 'horizontal',\n    fontWeight: 'bold',\n    fontSize: '14px'\n  }\n});\n\nvar applyButton = ui.Button({\n  label: 'Apply Change & Predict',\n  style: {stretch: 'horizontal', fontWeight: 'bold'},\n  onClick: function() {\n    var selected = scenarioSelect.getValue();\n    var percentage;\n    var modifiedLandcover = landcoverImg;\n    \n    if (selected === 'Built-up ➔ Greenplace (20%)') {\n      percentage = 0.2;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(50).and(ee.Image.random().lt(percentage)),\n        10\n      );\n    }\n    if (selected === 'Bare ➔ Built-up (20%)') {\n      percentage = 0.2;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(40).and(ee.Image.random().lt(percentage)),\n        50\n      );\n    }\n    if (selected === 'Cropland ➔ Forest (50%)') {\n      percentage = 0.5;\n      modifiedLandcover = landcoverImg.where(\n        landcoverImg.eq(60).and(ee.Image.random().lt(percentage)),\n        20\n      );\n    }"
  }
]