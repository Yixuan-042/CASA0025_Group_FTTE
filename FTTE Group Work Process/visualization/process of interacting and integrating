1. https://code.earthengine.google.com/d44226edbff3285d049dbefe39c0b13b

// ===============================
// 1. Load Data & Styles
// ===============================
var years = [2017,2018,2019,2020,2021,2022,2023];
var co2Paths = {
  2017:'users/HuitingChen/2017co2',
  2018:'users/HuitingChen/2018co2',
  2019:'users/HuitingChen/2019co2',
  2020:'users/HuitingChen/2020co2',
  2021:'users/HuitingChen/2021co2',
  2022:'users/HuitingChen/2022co2',
  2023:'users/HuitingChen/2023co2'
};
var populationFC  = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/population0422');
var ntlFC         = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/NTL0422');
var buildingStats = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/BuildingGrid0424');
var districts     = ee.FeatureCollection('users/HuitingChen/GZ_boundaries');
Map.centerObject(districts,9);

// Always-visible district boundaries
Map.layers().add(ui.Map.Layer(
  districts.style({color:'white',width:1.2,fillColor:'00000000'}),
  {}, 'District Boundaries'
));

// ===============================
// 2. Landcover Classification
// ===============================
var esa = ee.ImageCollection('ESA/WorldCover/v100').first().select('Map').clip(districts);

var landsat9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterBounds(districts)
  .filterDate('2023-01-01','2023-12-31')
  .filter(ee.Filter.lt('CLOUD_COVER',10))
  .map(function(img){
    var mask = img.select('QA_PIXEL').bitwiseAnd(1<<3).eq(0);
    return img.updateMask(mask)
      .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7'])
      .divide(10000)
      .copyProperties(img,['system:time_start']);
  });

var composite = landsat9.median().clip(districts);

var trainingSamples = composite.addBands(esa).sample({
  region:districts.geometry(),
  scale:30,
  numPixels:5000,
  seed:42,
  geometries:true
});

var classifier = ee.Classifier.smileRandomForest(50).train({
  features:trainingSamples,
  classProperty:'Map',
  inputProperties:composite.bandNames()
});

var classified = composite.classify(classifier)
  .reproject({crs:'EPSG:4326',scale:30});

// ===============================
// 3. Common Legend Function
// ===============================
function createLegend(min, max, palette, title, units, customTicks) {
  var panel = ui.Panel({style:{
    padding:'8px',
    backgroundColor:'white',
    position:'bottom-left',
    width:'250px'
  }});
  panel.add(ui.Label(title + (units?(' ('+units+')'):''), {fontWeight:'bold'}));
  panel.add(ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0)
      .multiply((max - min)/200).add(min)
      .visualize({min:min, max:max, palette:palette}),
    params:{bbox:[0,0,200,10], dimensions:'200x10'},
    style:{stretch:'horizontal', margin:'4px 0'}
  }));
  var ticks = customTicks || (function(){
    var step = (max - min)/4;
    return [min, min+step, min+2*step, min+3*step, max];
  })();
  var tickPanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});
  ticks.forEach(function(v){
    tickPanel.add(ui.Label(v.toFixed(2), {margin:'0 4px'}));
  });
  panel.add(tickPanel);
  return panel;
}

// ===============================
// 4. CO₂ Emission Interactive
// ===============================
var visParamsCO2 = {
  min:0, max:600,
  palette:['#440154','#3b528b','#21908d','#5dc962','#fde725']
};
var co2Images = {}, avgList = {};
years.forEach(function(y){
  var img = ee.Image(co2Paths[y]);
  co2Images[y] = img;
  avgList[y] = img.reduceRegion({
    reducer:ee.Reducer.mean(),
    geometry:img.geometry(),
    scale:1000,
    maxPixels:1e13
  }).getNumber('b1');
});

var defaultYear = 2023;
Map.layers().add(ui.Map.Layer(co2Images[defaultYear], visParamsCO2, 'CO₂ '+defaultYear));

// Year selector + charts
var yearSelector = ui.Select({
  items: years.map(String),
  value: String(defaultYear),
  style:{width:'100%', fontWeight:'bold', fontSize:'14px'}
});
var yearPanel = ui.Panel([
  ui.Label('Select Year', {fontWeight:'bold', fontSize:'16px'}),
  yearSelector
], ui.Panel.Layout.flow('vertical'), {margin:'0 0 8px 0'});

var lineChart = ui.Chart.array.values({
  array: ee.Array(years.map(function(y){ return [avgList[y]]; })),
  axis:0, xLabels:years
})
.setChartType('LineChart')
.setOptions({
  title:'Avg CO₂ Emission Trend',
  hAxis:{ticks:years, textStyle:{fontSize:11}, format:'####'},
  vAxis:{title:'Mean CO₂'},
  legend:{position:'none'},
  lineWidth:3, pointSize:5, fontSize:13,
  chartArea:{width:'85%', height:'70%'}
});
var districtChart = ui.Panel([], null, {shown:false});

var btnLine = ui.Button('City Avg Trend', function(){
  lineChart.style().set('shown', true);
  districtChart.style().set('shown', false);
});
var btnBar = ui.Button('District CO₂ Dist.', function(){
  lineChart.style().set('shown', false);
  districtChart.style().set('shown', true);
});
var togglePanel = ui.Panel([btnLine, btnBar], ui.Panel.Layout.flow('horizontal'), {margin:'8px 0'});

var co2Panel = ui.Panel(
  [yearPanel, togglePanel, lineChart, districtChart],
  ui.Panel.Layout.flow('vertical'),
  {
    position: 'top-right',
    margin: '80px 20px 0 0',   // down 80px, right 20px
    width: '300px',
    padding: '12px',
    backgroundColor: 'rgba(255,255,255,0.9)',
    border: '1px solid #ccc',
    borderRadius: '10px'
  }
);
Map.add(co2Panel);

function updateDistrictChart(y){
  var chart = ui.Chart.image.byRegion(
    co2Images[y], districts, ee.Reducer.sum(), 1000, 'ENG_NAME'
  )
  .setChartType('ColumnChart')
  .setOptions({
    title:'District Total CO₂ – '+y,
    hAxis:{slantedText:true},
    vAxis:{title:'Total CO₂'},
    legend:{position:'none'},
    fontSize:12
  });
  districtChart.clear();
  districtChart.add(chart);
}
updateDistrictChart(defaultYear);

yearSelector.onChange(function(val){
  var y = parseInt(val,10);
  Map.layers().set(1, ui.Map.Layer(co2Images[y], visParamsCO2, 'CO₂ '+y));
  updateDistrictChart(y);
});

// ===============================
// 5. Thematic Layers Preparations
// ===============================
var popImg    = populationFC
  .reduceToImage({properties:['RASTERVALU'], reducer:ee.Reducer.first()})
  .rename('pop_den');
var popMasked = popImg.updateMask(popImg.gt(0));
var ntlImg    = ntlFC
  .reduceToImage({properties:['RASTERVALU'], reducer:ee.Reducer.first()})
  .rename('NTL_intensity');
var ntlMasked = ntlImg.updateMask(ntlImg.gt(0));
var heightImg = buildingStats
  .reduceToImage({properties:['MeanHeight'], reducer:ee.Reducer.first()})
  .rename('MeanHeight');
var densImg   = buildingStats
  .reduceToImage({properties:['BuiDensity'], reducer:ee.Reducer.first()})
  .rename('BuiDensity');
var coverImg  = buildingStats
  .reduceToImage({properties:['BuiCover'], reducer:ee.Reducer.first()})
  .rename('BuiCover');

var pStats = popMasked.reduceRegion({
  reducer:ee.Reducer.percentile([5,95]),
  geometry:populationFC.geometry(),
  scale:1000, maxPixels:1e13
});
var min5  = ee.Number(pStats.get('pop_den_p5')).getInfo();
var max95 = ee.Number(pStats.get('pop_den_p95')).getInfo();

var visParamsDict = {
  'Population Density': {
    image: popMasked,
    vis: {min:min5,max:max95,palette:['lightyellow','orange','red','darkred']},
    units:'people/km²', band:'pop_den'
  },
  'Nighttime Lights': {
    image: ntlMasked,
    vis: {min:0,max:50,palette:['0000ff','8a2be2','ff0000','ffa500','ffff00','ffffff']},
    units:'', band:'NTL_intensity'
  },
  'Building Height': {
    image: heightImg,
    vis: {min:0,max:80,palette:['#ffffcc','#fd8d3c','#bd0026']},
    units:'m', band:'MeanHeight'
  },
  'Building Density': {
    image: densImg,
    vis: {min:0,max:1500,palette:['#edf8fb','#b2e2e2','#66c2a4','#238b45']},
    units:'', band:'BuiDensity'
  },
  'Footprint Ratio': {
    image: coverImg,
    vis: {min:0,max:1,palette:['#f7fcf0','#bae4bc','#238b45']},
    units:'', band:'BuiCover'
  },
  'CO₂ Emission': {
    image: co2Images[defaultYear],
    vis: visParamsCO2,
    units:'', band:'b1'
  }
};

// ===============================
// 6. Pie Chart + Legend in One Vertical Panel
// ===============================
var lcClasses = [
  {val:10,name:'Forest'}, {val:20,name:'Shrubland'}, {val:30,name:'Grassland'},
  {val:40,name:'Cropland'},{val:50,name:'Built-up'},{val:60,name:'Bare'},
  {val:70,name:'Snow/Ice'},{val:80,name:'Water'},     {val:90,name:'Wetland'},
  {val:95,name:'Mangrove'},{val:100,name:'Moss/Lichen'}
];
var hist = ee.Dictionary(classified.reduceRegion({
  reducer:ee.Reducer.frequencyHistogram(),
  geometry:districts.geometry(),
  scale:30, maxPixels:1e13
}).get('classification'));
var pieData = lcClasses.map(function(c){
  var k = ee.String(ee.Number(c.val).format());
  var cnt = ee.Number(ee.Algorithms.If(hist.contains(k), hist.get(k), 0));
  return [c.name, cnt];
});
var pie = ui.Chart.array.values({
  array:ee.Array(pieData.map(function(d){ return [d[1]]; })),
  axis:0, xLabels: pieData.map(function(d){return d[0];})
})
.setChartType('PieChart')
.setOptions({
  title:'Landcover Proportion',
  sliceVisibilityThreshold:0,
  pieSliceText:'percentage',
  legend:{position:'right', textStyle:{fontSize:10}},
  chartArea:{width:'70%',height:'70%'}, fontSize:11
});

// Vertical panel containing pie + interactive legend
var topLeftPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    position:'top-left',
    margin:'80px 0 0 20px',  // down 80px, left 20px
    width:'300px',
    padding:'8px',
    backgroundColor:'rgba(255,255,255,0.9)',
    border:'1px solid #ccc',
    borderRadius:'10px'
  }
});
topLeftPanel.add(pie);
topLeftPanel.add(createLegend(
  visParamsCO2.min, visParamsCO2.max,
  visParamsCO2.palette,
  'CO₂ Emission','',[0,150,300,450,600]
));
Map.add(topLeftPanel);

// ===============================
// 7. Thematic Selector & Legend Swap
// ===============================
var currentLayer = null;
var infoLabel = ui.Label('Click map for value',{fontSize:'12px',margin:'4px 0'});
var selector = ui.Select({
  items:Object.keys(visParamsDict),
  value:'Population Density',
  style:{fontWeight:'bold',fontSize:'12px',padding:'2px'}
});
selector.onChange(function(key){
  var cfg = visParamsDict[key];
  if(currentLayer) Map.layers().remove(currentLayer);
  currentLayer = ui.Map.Layer(cfg.image, cfg.vis, key);
  Map.layers().add(currentLayer);
  // Replace legend in panel index 1
  topLeftPanel.widgets().set(1,
    createLegend(cfg.vis.min, cfg.vis.max, cfg.vis.palette, key, cfg.units,
      key==='CO₂ Emission' ? [0,150,300,450,600] : null
    )
  );
  infoLabel.setValue('Click map for ' + key);
});

var mainPanel = ui.Panel([
  ui.Label('Thematic Layers',{fontWeight:'bold',fontSize:'12px'}),
  selector,
  infoLabel
], ui.Panel.Layout.flow('vertical'), {
  position:'top-center',
  margin:'80px 0 0 0',  // down 80px
  padding:'6px',
  width:'200px',
  backgroundColor:'white',
  border:'1px solid #ccc',
  borderRadius:'8px'
});
Map.add(mainPanel);
selector.setValue('Population Density');

Map.onClick(function(coords){
  var key = selector.getValue(),
      cfg = visParamsDict[key];
  cfg.image.sample(ee.Geometry.Point([coords.lon, coords.lat]),1000)
    .first().get(cfg.band).evaluate(function(v){
      infoLabel.setValue(
        key + ': ' + ((v!==null)?v.toFixed(2):'N/A') +
        (cfg.units ? ' ' + cfg.units : '')
      );
    });
});



2. https://code.earthengine.google.com/aac7d0f9ffa053783628314c209fe05e 

// ===============================
// Global style constants
// ===============================
var DEFAULT_FONT = 'Arial';
var LABEL_FONT_SIZE = '12px';
var TITLE_FONT_SIZE = '14px';

// ===============================
// 1. Load data and feature collections
// ===============================
var years = [2017,2018,2019,2020,2021,2022,2023];
var co2Paths = {
  2017:'users/HuitingChen/2017co2',
  2018:'users/HuitingChen/2018co2',
  2019:'users/HuitingChen/2019co2',
  2020:'users/HuitingChen/2020co2',
  2021:'users/HuitingChen/2021co2',
  2022:'users/HuitingChen/2022co2',
  2023:'users/HuitingChen/2023co2'
};
var populationFC  = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/population0422');
var ntlFC         = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/NTL0422');
var buildingStats = ee.FeatureCollection('projects/ee-chenyixuan0402/assets/BuildingGrid0424');
var districts     = ee.FeatureCollection('users/HuitingChen/GZ_boundaries');
Map.centerObject(districts, 9);

// ===============================
// 2. Create and keep boundary layer on top
// ===============================
var boundaryStyle = {color:'white', width:1.2, fillColor:'00000000'};
var boundaryLayer = ui.Map.Layer(districts.style(boundaryStyle), {}, 'District Boundaries', true);
Map.layers().add(boundaryLayer);
function bringBoundaryToFront() {
  Map.layers().remove(boundaryLayer);
  Map.layers().add(boundaryLayer);
}

// ===============================
// 3. Landcover classification
// ===============================
var esa = ee.ImageCollection('ESA/WorldCover/v100')
             .first()
             .select('Map')
             .clip(districts);

var landsat9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterBounds(districts)
  .filterDate('2023-01-01', '2023-12-31')
  .filter(ee.Filter.lt('CLOUD_COVER', 10))
  .map(function(image) {
    var cloudMask = image.select('QA_PIXEL').bitwiseAnd(1 << 3).eq(0);
    return image.updateMask(cloudMask)
                .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7'])
                .divide(10000)
                .copyProperties(image, ['system:time_start']);
  });

var composite = landsat9.median().clip(districts);

var trainingSamples = composite.addBands(esa).sample({
  region: districts.geometry(),
  scale: 30,
  numPixels: 5000,
  seed: 42,
  geometries: true
});

var classifier = ee.Classifier.smileRandomForest(50).train({
  features: trainingSamples,
  classProperty: 'Map',
  inputProperties: composite.bandNames()
});

var classified = composite.classify(classifier)
  .reproject({crs: 'EPSG:4326', scale: 30});

var landcoverVis = {
  min: 10,
  max: 100,
  palette: [
    '006400', 'ffbb22', 'ffff4c', 'f096ff', 'fa0000', 
    'b4b4b4', 'f0f0f0', '0032c8', '0096a0', '00cf75', 'fae6a0'
  ]
};
Map.addLayer(classified, landcoverVis, 'Landcover Classification 2023');
  
  


// ===============================
// 4. Legend creation function
// ===============================
function createLegend(min, max, palette, title, units, customTicks) {
  var panel = ui.Panel({style:{
    padding:'8px', backgroundColor:'white',
    position:'bottom-left', width:'250px'
  }});
  panel.add(ui.Label(title + (units?(' ('+units+')'):''), {
    fontWeight:'bold',
    fontFamily:DEFAULT_FONT,
    fontSize:TITLE_FONT_SIZE,
    textAlign:'center',
    width:'100%'
  }));
  panel.add(ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0)
      .multiply((max - min)/200).add(min)
      .visualize({min:min, max:max, palette:palette}),
    params:{bbox:[0,0,200,10], dimensions:'200x10'},
    style:{stretch:'horizontal', margin:'4px 0'}
  }));
  var ticks = customTicks || (function(){
    var step=(max-min)/4;
    return [min, min+step, min+2*step, min+3*step, max];
  })();
  var tickPanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});
  ticks.forEach(function(v){
    tickPanel.add(ui.Label(v.toFixed(2), {
      fontFamily:DEFAULT_FONT,
      fontSize:LABEL_FONT_SIZE,
      margin:'0 4px'
    }));
  });
  panel.add(tickPanel);
  return panel;
}

// ===============================
// 5. CO₂ emission interactive panel
// ===============================
var visParamsCO2 = {
  min:0, max:600,
  palette:['#440154','#3b528b','#21908d','#5dc962','#fde725']
};
var co2Images = {}, avgList = {};
years.forEach(function(y){
  var img = ee.Image(co2Paths[y]);
  co2Images[y] = img;
  avgList[y] = img.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: img.geometry(),
    scale: 1000,
    maxPixels: 1e13
  }).getNumber('b1');
});

var defaultYear = 2023;
Map.layers().add(ui.Map.Layer(co2Images[defaultYear], visParamsCO2, 'CO₂ '+defaultYear));
bringBoundaryToFront();

var yearSelector = ui.Select({
  items: years.map(String),
  value: String(defaultYear),
  style:{
    fontFamily:DEFAULT_FONT,
    fontSize:LABEL_FONT_SIZE,
    fontWeight:'bold',
    width:'80%',
    margin:'0 auto'
  }
});
var yearPanel = ui.Panel([
  ui.Label('Select Year', {
    fontFamily:DEFAULT_FONT,
    fontSize:TITLE_FONT_SIZE,
    fontWeight:'bold',
    textAlign:'center',
    width:'100%'
  }),
  yearSelector
], ui.Panel.Layout.flow('vertical'), {margin:'0 0 8px 0'});

var lineChart = ui.Chart.array.values({
  array: ee.Array(years.map(function(y){ return [avgList[y]]; })),
  axis:0, xLabels: years
})
.setChartType('LineChart')
.setOptions({
  title:'Average CO₂ Emission Trend',
  fontName:DEFAULT_FONT,
  fontSize:parseInt(LABEL_FONT_SIZE),
  hAxis:{ticks:years, textStyle:{fontSize:11}, format:'####'},
  vAxis:{title:'Mean CO₂', titleTextStyle:{fontSize:LABEL_FONT_SIZE, fontName:DEFAULT_FONT}},
  legend:{position:'none'},
  lineWidth:3, pointSize:5,
  chartArea:{width:'85%', height:'70%'}
});
var districtChart = ui.Panel([], null, {shown:false});

var btnLine = ui.Button('City Avg Trend', function(){
  lineChart.style().set('shown',true);
  districtChart.style().set('shown',false);
}, {fontFamily:DEFAULT_FONT, fontSize:LABEL_FONT_SIZE});
var btnBar = ui.Button('District CO₂ Dist.', function(){
  lineChart.style().set('shown',false);
  districtChart.style().set('shown',true);
}, {fontFamily:DEFAULT_FONT, fontSize:LABEL_FONT_SIZE});
var togglePanel = ui.Panel([btnLine,btnBar], ui.Panel.Layout.flow('horizontal'), {margin:'8px 0'});

var co2Panel = ui.Panel(
  [yearPanel, togglePanel, lineChart, districtChart],
  ui.Panel.Layout.flow('vertical'),
  {
    position:'top-right',
    margin:'80px 20px 0 0',
    width:'300px',
    padding:'12px',
    backgroundColor:'rgba(255,255,255,0.9)',
    border:'1px solid #ccc',
    borderRadius:'10px'
  }
);
Map.add(co2Panel);

function updateDistrictChart(y){
  var chart = ui.Chart.image.byRegion(
    co2Images[y], districts, ee.Reducer.sum(), 1000, 'ENG_NAME'
  )
  .setChartType('ColumnChart')
  .setOptions({
    title:'District Total CO₂ – '+y,
    fontName:DEFAULT_FONT,
    fontSize:parseInt(LABEL_FONT_SIZE),
    hAxis:{slantedText:true},
    vAxis:{title:'Total CO₂', titleTextStyle:{fontSize:LABEL_FONT_SIZE, fontName:DEFAULT_FONT}},
    legend:{position:'none'}
  });
  districtChart.clear();
  districtChart.add(chart);
  bringBoundaryToFront();
}
updateDistrictChart(defaultYear);

yearSelector.onChange(function(val){
  var y = parseInt(val,10);
  Map.layers().set(1, ui.Map.Layer(co2Images[y], visParamsCO2, 'CO₂ '+y));
  updateDistrictChart(y);
});

// ===============================
// 6. Thematic layers preparation
// ===============================
var popImg    = populationFC.reduceToImage({properties:['RASTERVALU'], reducer:ee.Reducer.first()}).rename('pop_den');
var popMasked = popImg.updateMask(popImg.gt(0));
var ntlImg    = ntlFC.reduceToImage({properties:['RASTERVALU'], reducer:ee.Reducer.first()}).rename('NTL_intensity');
var ntlMasked = ntlImg.updateMask(ntlImg.gt(0));
var heightImg = buildingStats.reduceToImage({properties:['MeanHeight'], reducer:ee.Reducer.first()}).rename('MeanHeight');
var densImg   = buildingStats.reduceToImage({properties:['BuiDensity'], reducer:ee.Reducer.first()}).rename('BuiDensity');
var coverImg  = buildingStats.reduceToImage({properties:['BuiCover'], reducer:ee.Reducer.first()}).rename('BuiCover');

var pStats = popMasked.reduceRegion({
  reducer:ee.Reducer.percentile([5,95]),
  geometry:populationFC.geometry(),
  scale:1000, maxPixels:1e13
});
var min5  = ee.Number(pStats.get('pop_den_p5')).getInfo();
var max95 = ee.Number(pStats.get('pop_den_p95')).getInfo();

var visParamsDict = {
  'Population Density': {
    image:popMasked,
    vis:{min:min5,max:max95,palette:['lightyellow','orange','red','darkred']},
    units:'people/km²', band:'pop_den'
  },
  'Nighttime Lights': {
    image:ntlMasked,
    vis:{min:0,max:50,palette:['0000ff','8a2be2','ff0000','ffa500','ffff00','ffffff']},
    units:'', band:'NTL_intensity'
  },
  'Building Height': {
    image:heightImg,
    vis:{min:0,max:80,palette:['#ffffcc','#fd8d3c','#bd0026']},
    units:'m', band:'MeanHeight'
  },
  'Building Density': {
    image:densImg,
    vis:{min:0,max:1500,palette:['#edf8fb','#b2e2e2','#66c2a4','#238b45']},
    units:'', band:'BuiDensity'
  },
  'Footprint Ratio': {
    image:coverImg,
    vis:{min:0,max:1,palette:['#f7fcf0','#bae4bc','#238b45']},
    units:'', band:'BuiCover'
  },
  'CO₂ Emission': {
    image:co2Images[defaultYear],
    vis:visParamsCO2, units:'', band:'b1'
  }
};

// ===============================
// 7. Pie chart and legend panel
// ===============================
var lcClasses = [
  {val:10,name:'Forest'},{val:20,name:'Shrubland'},{val:30,name:'Grassland'},
  {val:40,name:'Cropland'},{val:50,name:'Built-up'},{val:60,name:'Bare'},
  {val:70,name:'Snow/Ice'},{val:80,name:'Water'},{val:90,name:'Wetland'},
  {val:95,name:'Mangrove'},{val:100,name:'Moss/Lichen'}
];
var hist = ee.Dictionary(classified.reduceRegion({
  reducer:ee.Reducer.frequencyHistogram(),
  geometry:districts.geometry(),
  scale:30, maxPixels:1e13
}).get('classification'));
var pieData = lcClasses.map(function(c){
  var k = ee.String(ee.Number(c.val).format());
  var cnt = ee.Number(ee.Algorithms.If(hist.contains(k), hist.get(k), 0));
  return [c.name, cnt];
});
var pie = ui.Chart.array.values({
  array:ee.Array(pieData.map(function(d){return [d[1]];})),
  axis:0, xLabels:pieData.map(function(d){return d[0];})
})
.setChartType('PieChart')
.setOptions({
  title:'Landcover Proportion',
  fontName:DEFAULT_FONT,
  fontSize:parseInt(LABEL_FONT_SIZE),
  sliceVisibilityThreshold:0,
  pieSliceText:'percentage',
  legend:{position:'right', textStyle:{fontSize:10, fontName:DEFAULT_FONT}},
  chartArea:{width:'70%',height:'70%'}
});

var topLeftPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    position:'top-left',
    margin:'80px 0 0 20px',
    width:'300px',
    padding:'8px',
    backgroundColor:'rgba(255,255,255,0.9)',
    border:'1px solid #ccc',
    borderRadius:'10px'
  }
});
topLeftPanel.add(pie);
topLeftPanel.add(createLegend(
  visParamsCO2.min, visParamsCO2.max, visParamsCO2.palette,
  'CO₂ Emission','',[0,150,300,450,600]
));
Map.add(topLeftPanel);
bringBoundaryToFront();

// ===============================
// 8. Thematic layer selector + click info
// ===============================
var currentLayer = null;
var infoLabel = ui.Label('Click map for value', {
  fontFamily:DEFAULT_FONT,
  fontSize:LABEL_FONT_SIZE
});
var selector = ui.Select({
  items:Object.keys(visParamsDict),
  value:'Population Density',
  style:{
    fontFamily:DEFAULT_FONT,
    fontSize:LABEL_FONT_SIZE,
    width:'80%',
    margin:'0 auto'
  }
});
selector.onChange(function(key){
  var cfg = visParamsDict[key];
  if (currentLayer) Map.layers().remove(currentLayer);
  currentLayer = ui.Map.Layer(cfg.image, cfg.vis, key);
  Map.layers().add(currentLayer);
  topLeftPanel.widgets().set(1,
    createLegend(cfg.vis.min, cfg.vis.max, cfg.vis.palette, key, cfg.units,
      key==='CO₂ Emission' ? [0,150,300,450,600] : null
    )
  );
  infoLabel.setValue('Click map for ' + key);
  bringBoundaryToFront();
});

var mainPanel = ui.Panel([
  ui.Label('Thematic Layers', {
    fontFamily:DEFAULT_FONT,
    fontSize:TITLE_FONT_SIZE,
    fontWeight:'bold',
    textAlign:'center',
    width:'100%'
  }),
  selector,
  infoLabel
], ui.Panel.Layout.flow('vertical'), {
  position:'top-center',
  margin:'80px 0 0 0',
  padding:'6px',
  width:'250px',
  backgroundColor:'white',
  border:'1px solid #ccc',
  borderRadius:'8px'
});
Map.add(mainPanel);
selector.setValue('CO₂ Emission');

Map.onClick(function(coords){
  var key = selector.getValue(),
      cfg = visParamsDict[key];
  cfg.image.sample(ee.Geometry.Point([coords.lon, coords.lat]),1000)
    .first().get(cfg.band).evaluate(function(v){
      var text = (v!==null && v!==undefined)? v.toFixed(2): 'N/A';
      infoLabel.setValue(key + ': ' + text + (cfg.units? ' ' + cfg.units : ''));
    });
  bringBoundaryToFront();
});
