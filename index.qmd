# CASA00025 FTTE Group Project

## Project Summary 

Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.

### Problem Statement 

What is the problem you’re trying to address using this application? 

### End User 

Who are you building this application for? How does it address a need this community has?

### Data

CO₂ Emissions Data:
Annual CO₂ emissions data is sourced from the ODIAC 2023 dataset (ODIAC 2023). Historical emissions from 2018 to 2022 are also included to support temporal trend analysis.

Land Cover Data:
Land cover classification is generated using Landsat 9 Surface Reflectance imagery and ESA WorldCover 2021 as training labels. A Random Forest model is trained and applied in Google Earth Engine to produce a 30-meter resolution land cover map.

Population Data:
Population data is provided by the Chinese Academy of Sciences, offering 1 km × 1 km gridded raster data for China, supporting demographic and spatial distribution analysis.

Nighttime Light Data:
Nighttime light intensity for 2023 is processed using monthly VIIRS DNB composites in Google Earth Engine. The data is aggregated to produce a 100-meter resolution raster clipped to the Guangzhou boundary.

Building Characteristics Data:
Building data is sourced from Gaode Map’s 3D Map API (Gaode Map 3D), including building height, footprint area, and gross internal area (GIA) for urban morphology analysis.

### Methodology

How are you using this data to address the problem?

### Interface

How does your application's interface work to address the needs of your end user?

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>

:::
## How it Works 

Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):

### Application Overview

This application is designed for interactive environmental analysis using Google Earth Engine (GEE).  
It integrates multiple geospatial datasets, builds thematic visualizations, and applies machine learning models to predict CO₂ emissions under various landcover scenarios.

### Data Loading and Preprocessing

The first step imports core datasets including district boundaries, population density, nighttime light intensity, building statistics, and CO₂ emission rasters for the years 2017–2023.

```js
var districts = ee.FeatureCollection('users/.../GZ_boundaries');
var populationFC = ee.FeatureCollection('projects/.../population0422');
var ntlFC = ee.FeatureCollection('projects/.../NTL0422');
var buildingStats = ee.FeatureCollection('projects/.../BuildingGrid0424');
var co2Paths = { 2017: 'users/.../2017co2', ..., 2023: 'users/.../2023co2' };
Map.centerObject(districts, 9);
---

A boundary layer is added to the map, ensuring district outlines remain on top of all visualizations.

### Landcover Classification

Landsat 9 imagery and ESA WorldCover data are used to train a Random Forest classifier.
The resulting landcover classification is simplified into 7 categories for clearer visualization.

```js
var composite = landsat9.median().clip(districts);
var samples = composite.addBands(esa).sample({ ... });
var classifier = ee.Classifier.smileRandomForest(50).train({ ... });
var classified = composite.classify(classifier).remap([10,20,...],[0,1,...]);
---

### CO₂ Emission Visualization

The application visualizes CO₂ emissions dynamically across different years.
A dropdown menu allows users to switch between annual layers, and charts provide both citywide trends and district-level distributions.

```js
var co2Images = years.reduce(function(obj, y) {
  obj[y] = ee.Image(co2Paths[y]);
  return obj;
}, {});
Map.layers().set(2, ui.Map.Layer(co2Images[2023], visParamsCO2, 'CO₂ Emission'));
---

### Thematic Layers and Interaction
A thematic selector enables users to switch between layers such as population density, nighttime lights, and building characteristics.
Clicking on the map displays real-time attribute values for the selected theme.

```js
var visParamsDict = {
  'Population Density': { image: popMasked, vis: {min: 0, max: 5000, palette: [...]}, units: 'people/km²' },
  'Nighttime Lights': { ... },
  ...
};
selector.onChange(function(key) { ... });
Map.onClick(function(coords) { ... });
---

### Predictive Modeling with Random Forest

The app constructs a Random Forest regression model to predict CO₂ emissions based on....


---


```js
Map.setCenter(35.51898, 33.90153, 15);

Map.setOptions("satellite");

var aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);
```

You can include images:

![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)

and math:
$$ \Large t = {\frac{\overline{x_1}-\overline{x_2}} {\sqrt{\frac{s^2_1}{n_1} + \frac{s^2_2}{n_2}}}} $$


