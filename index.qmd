# CASA00025 FTTE Group Project

## Project Summary 

Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.

### Problem Statement 

What is the problem you’re trying to address using this application? 

### End User 

Who are you building this application for? How does it address a need this community has?

### Data

CO₂ Emissions Data:
Annual CO₂ emissions data is sourced from the ODIAC 2023 dataset (ODIAC 2023). Historical emissions from 2018 to 2022 are also included to support temporal trend analysis.

Land Cover Data:
Land cover classification is generated using Landsat 9 Surface Reflectance imagery and ESA WorldCover 2021 as training labels. A Random Forest model is trained and applied in Google Earth Engine to produce a 30-meter resolution land cover map.

Population Data:
Population data is provided by the Chinese Academy of Sciences, offering 1 km × 1 km gridded raster data for China, supporting demographic and spatial distribution analysis.

Nighttime Light Data:
Nighttime light intensity for 2023 is processed using monthly VIIRS DNB composites in Google Earth Engine. The data is aggregated to produce a 100-meter resolution raster clipped to the Guangzhou boundary.

Building Characteristics Data:
Building data is sourced from Gaode Map’s 3D Map API (Gaode Map 3D), including building height, footprint area, and gross internal area (GIA) for urban morphology analysis.

### Methodology

How are you using this data to address the problem?

### Interface

How does your application's interface work to address the needs of your end user?

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>

:::
## How it Works 

Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):

This **Google Earth Engine (GEE)** script delivers an integrated dashboard for Guangzhou that combines **time-series CO₂ monitoring, multi-layer spatial comparison, and “what-if” land-cover simulations** in one map. The workflow has four parts:

### 1  Data ingestion
CO₂ rasters (2017 – 2023) are loaded by year; population, night-time-light (NTL) and building statistics come as feature collections and are converted to rasters with `reduceToImage()`. 5-to-95 percentile scaling ensures consistent colour ramps. District boundaries are added for reference and always kept on top.

### 2  Thematic layers  
* **Land-cover 2023** A median Landsat-9 composite is classified with a 50-tree Random-Forest trained on ESA WorldCover samples, producing seven classes with a custom palette.  
* **CO₂ emissions** The default view shows 2023; a drop-down instantly swaps any other year.  
* **Population density, NTL, building height, density and footprint ratio** are stored in a dictionary so one selector can toggle them; the legend is generated on the fly by `createLegend()`.

### 3  Interactive GUI  
Two floating panels orchestrate the interface:  
* **Right panel**: year selector → CO₂ raster; line chart of city-wide means; auto-refreshing district bar chart.  
* **Left panel**: thematic-layer drop-down; live legend; 2023 land-cover pie chart. Clicking the map samples the active raster and returns the value + units.  
`bringBoundaryToFront()` re-adds the boundary layer after every change to guarantee visibility.

### 4  Scenario prediction  

---


```js
Map.setCenter(35.51898, 33.90153, 15);

Map.setOptions("satellite");

var aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);
```

You can include images:

![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)

and math:
$$ \Large t = {\frac{\overline{x_1}-\overline{x_2}} {\sqrt{\frac{s^2_1}{n_1} + \frac{s^2_2}{n_2}}}} $$


